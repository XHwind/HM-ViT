name: bevformer_point_pillar_hetero_fixbackbone_mixed_ego_sequential # only used for demonstration data api
#root_dir: '/home/jiaqi2/data/opv2v/train'
#validate_dir: '/home/jiaqi2/data/opv2v/validate'
root_dir: '/data/opv2v/train'
validate_dir: '/data/opv2v/validate'
#root_dir: '/home/hao/dataset/opv2v/train'
#validate_dir: '/home/hao/dataset/opv2v/train'


camera_to_lidar_ratio: 0
ego_mode: 'lidar'

yaml_parser: ["load_camera_point_pillar_params", "load_bevformer_param"]
mmcv_file_path_ptr: ["model.args.camera.BEVFormer.mmcv_file_path"]

train_params:
  batch_size: &batch_size 1
  epoches: &epoches 151
  eval_freq: 2
  save_freq: 1
  max_cav: &max_cav 5 # 5
  visible: true


fusion:
  core_method: 'CamLiIntermediateFusionDataset' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args: []


data_augment: []

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: CamLiPreprocessor
  cav_lidar_range: &cav_lidar [-102.4, -102.4, -3, 102.4, 102.4, 1]
  args:
    camera_preprocess:
      core_method: 'RgbPreprocessor'
      args:
        bgr2rgb: true
        resize_x: &image_width 512
        resize_y: &image_height 512
        mean: [ 0.485, 0.456, 0.406 ]
        std: [ 0.229, 0.224, 0.225 ]
      # object evaluation range
      cav_lidar_range: *cav_lidar
    lidar_preprocess:
      core_method: 'SpVoxelPreprocessor'
      args:
        voxel_size: &voxel_size [ 0.4, 0.4, 4 ]
        max_points_per_voxel: 32
        max_voxel_train: 32000
        max_voxel_test: 70000
      cav_lidar_range: *cav_lidar


# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 4
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.27
  order: 'hwl' # hwl or lwh
  max_num: 120 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

model:
  core_method: 'bevformer_point_pillar_hetero'
  args:
    point_pillar_scatter:
      num_features: &point_pillar_scatter_num_features 64
    anchor_number: *achor_num
    compression: 0
    spatial_transform: &spatial_transform
      downsample_rate: 4
      voxel_size: *voxel_size
      use_roi_mask: true

    hetero_fusion:
      num_iters: 2 # 2
      spatial_transform: *spatial_transform
#      fc:
#        input_dim: 256
#        hidden_dim: 128
#        out_dim: 128
      hetero_fusion_block:
        spatial_transform: *spatial_transform
        architect_mode: 'sequential'
        input_dim: 256
        mlp_dim: 256
        agent_size: *max_cav
        window_size: 8 # 8
        dim_head: 32
        drop_out: 0.1
        mask: true

    camera:
      max_cav: *max_cav
      anchor_number: *achor_num
      point_pillar_scatter: # only used in pointpillar scatter
        num_features: 64

      decoder: &base_decoder
        input_dim: 256
        num_layer: 2
        num_ch_dec: &decoder_block [ 256, 256 ]

      BEVFormer:
        mmcv_file_path: "./subbevformer_resnet.py"# relative to current yaml file
        img_shape: [ *image_height, *image_width ]

      seg_head_dim: 32
      output_class: 2
    lidar:
      voxel_size: *voxel_size
      lidar_range: *cav_lidar
      anchor_number: *achor_num
      pillar_vfe:
        use_norm: true
        with_distance: false
        use_absolute_xyz: true
        num_filters: [ 64 ]
      point_pillar_scatter:
        num_features: *point_pillar_scatter_num_features

      base_bev_backbone:
        layer_nums: [ 3, 5, 8 ]
        layer_strides: [ 2, 2, 2 ]
        num_filters: [ 64, 128, 256 ]
        upsample_strides: [ 1, 2, 4 ]
        num_upsample_filter: [ 128, 128, 128 ]

      shrink_header:
        kernal_size: [ 3 ]
        stride: [ 2 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      cls_head_dim: 256
      anchor_num: *achor_num
    hetero_decoder:
      input_dim: 256
      num_layer: 2
      num_ch_dec: [ 256, 256 ]
      anchor_number: *achor_num

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: AdamW
  lr: 2e-4
  args:
    eps: 1e-10
    weight_decay: 1e-2

lr_scheduler:
    core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
    epoches: *epoches
    warmup_lr: 2e-3
    warmup_epoches: 10
    lr_min: 5e-6